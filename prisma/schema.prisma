// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL_test")
}

model user {
  id         String     @id @default(uuid())
  name       String?
  username   String?    @unique //unique name for users
  bio        String? //user bio
  avatar     String? //user avatar
  coverImage String? //cover image for user profile
  location   String? //loation for best recommendations for users
  email      String?    @unique
  password   String?
  isAdmin    Boolean?   @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  posts      posts[]
  likes      likes[]
  comments   comments[]
  replies    replies[]

  socialLinks socialLinks[]
  tag         tag[]
}

model posts {
  id        String     @id @default(uuid())
  title     String?
  content   String?
  likeCount Int        @default(0)
  userId    String
  user      user       @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tags      tag[]
  images    images[]
  likes     likes[]
  comments  comments[]
}

model tag {
  id        String   @id @default(uuid())
  title     String?
  postId    String
  userId    String?
  user      user?    @relation(references: [id], fields: [userId],onDelete: Cascade)
  post      posts    @relation(references: [id], fields: [postId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId,userId])
}

model images {
  id        String     @id @default(uuid())
  src       String?
  alt       String?
  postId    String
  post      posts      @relation(references: [id], fields: [postId], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  comments[]
  replies   replies[]

  @@index([postId])
}

model likes {
  id        String    @id @default(uuid())
  likedBy   String
  postId    String?
  post      posts?    @relation(references: [id], fields: [postId], onDelete: Cascade)
  user      user      @relation(references: [id], fields: [likedBy], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  replies   replies[]

  @@index([likedBy, postId])
}

model comments {
  id          String    @id @default(uuid())
  content     String?
  commentedBy String
  postId      String
  attachments String?
  images      images?   @relation(references: [id], fields: [attachments], onDelete: Cascade)
  post        posts     @relation(references: [id], fields: [postId], onDelete: Cascade)
  user        user      @relation(references: [id], fields: [commentedBy], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  replies     replies[]

  @@index([postId, commentedBy, attachments])
}

model replies {
  id          String   @id @default(uuid())
  content     String?
  commentId   String
  likeId      String?
  repliedBy   String
  attachments String?
  images      images?  @relation(references: [id], fields: [attachments], onDelete: Cascade)
  comments    comments @relation(references: [id], fields: [commentId], onDelete: Cascade)
  likes       likes?   @relation(references: [id], fields: [likeId], onDelete: Cascade)
  user        user     @relation(references: [id], fields: [repliedBy], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([repliedBy, likeId, commentId, attachments])
}

model socialLinks {
  id        String  @id @default(uuid())
  userId    String?
  instagram String?
  twitter   String?
  linkedIn  String?
  reddit    String?

  user      user?    @relation(references: [id], fields: [userId],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
